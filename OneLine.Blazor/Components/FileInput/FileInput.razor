@inherits FileInputBase
@namespace OneLine.Blazor.Components
@using OneLine.Models
@using OneLine.Extensions
@if (!Hidden)
{
    <CascadingValue Value="this">
        @DropZoneInlineStyle
        @if (!HideDropZone)
        {
            <div class="@DropClass" @ref=DropTarget @ondragenter=OnDragEnter @ondrop=OnDrop @ondragleave=OnDragLeave>
                @Resourcer.GetString("DropFilesHere")
                @if (BlobDatas.IsNotNullAndNotEmpty())
                {
                    <br class="p-0" />
                }
                @foreach (var BlobData in BlobDatas ?? Enumerable.Empty<BlobData>())
                {
                    var localBlobData = BlobData;
                    <BSButton Color="Color.Link">
                        <span @onclick=@(async () => await Download(localBlobData)) title="@Resourcer.GetString("Download")">@localBlobData.Name</span>
                        <span class="text-danger" @onclick=@(() => Remove(localBlobData)) style="cursor: pointer" title="@Resourcer.GetString("Delete")">&times;</span>
                    </BSButton>
                }
                @foreach (var UserBlob in UserBlobs ?? Enumerable.Empty<UserBlobs>())
                {
                    var localUserBlob = UserBlob;
                    <BSButton Color="Color.Link">
                        <span @onclick=@(async () => await Download(localUserBlob)) title="@Resourcer.GetString("Download")">@localUserBlob.Name</span>
                        @if (!HideDeleteButton)
                        {
                            <span class="text-danger" @onclick=@(() => Remove(localUserBlob)) style="cursor: pointer" title="@Resourcer.GetString("Delete")">&times;</span>
                        }
                    </BSButton>
                }
            </div>
        }
        else
        {
            @foreach (var BlobData in BlobDatas ?? Enumerable.Empty<BlobData>())
            {
                var localBlobData = BlobData;
                <BSButton Color="Color.Link">
                    <span @onclick=@(async () => await Download(localBlobData)) title="@Resourcer.GetString("Download")">@localBlobData.Name</span> 
                    <span class="text-danger" @onclick=@(() => Remove(localBlobData)) style="cursor: pointer" title="@Resourcer.GetString("Delete")">&times;</span>
                </BSButton>
            }
            @foreach (var UserBlob in UserBlobs ?? Enumerable.Empty<UserBlobs>())
            {
                var localUserBlob = UserBlob;
                <BSButton Color="Color.Link">
                    <span @onclick=@(async () => await Download(localUserBlob)) title="@Resourcer.GetString("Download")">@localUserBlob.Name</span>
                    @if (!HideDeleteButton)
                    {
                        <span class="text-danger" @onclick=@(() => Remove(localUserBlob)) style="cursor: pointer" title="@Resourcer.GetString("Delete")">&times;</span>
                    }
                </BSButton>
            }
        }
        @if (HideDropZone)
        {
            <br class="p-0" />
            <br class="p-0" />
        }
        @if (!HideResetButton)
        {
            <BSButton OnClick=Clear Color=Color.Secondary>@ResetButtonText</BSButton>
        }
        @if (!HideAddButton)
        {
            <BSButton OnClick=OpenDeviceFileSystem Color=Color.Primary>@AddButtonText</BSButton>
        }
        @if (IsMultiple)
        {
            <input type="file" class="d-none" @ref=DropTargetInput @attributes=UnknownParameters @onchange=OnInputChange multiple />
        }
        else
        {
            <input type="file" class="d-none" @ref=DropTargetInput @attributes=UnknownParameters @onchange=OnInputChange />
        }
    </CascadingValue>
}